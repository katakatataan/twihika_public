version: '3.9'
services:
  redis:
    build:
      context: ./extra_modules/redis
      dockerfile: Dockerfile
    container_name: redis
    environment:
      PASSWORD: ${UPSTASH_REDIS_PASSWORD}
    restart: "always"
    volumes:
      - redis_data:/data
    env_file:
      - .env
    ports:
      - "6379:6379"

  debezium:
    build:
      context: ./extra_modules/debezium
      dockerfile: Dockerfile
      args:
        - UPSTASH_REDIS_URL=${UPSTASH_REDIS_URL}
        - UPSTASH_REDIS_PASSWORD=${UPSTASH_REDIS_PASSWORD}
        - PUBSUB_TOPIC_ALL=${PUBSUB_TOPIC_ALL}
        - DEBEZIUM_TABLE_LIST=${DEBEZIUM_TABLE_LIST}
        - DEBEZIUM_ROUTING_TO_TOPICL_ALL_REGEXP=${DEBEZIUM_ROUTING_TO_TOPICL_ALL_REGEXP}
        - TWIHIKA_POSTGRES_HOST=postgres
        - TWIHIKA_POSTGRES_PORT=${TWIHIKA_POSTGRES_PORT}
        - TWIHIKA_POSTGRES_USER=${TWIHIKA_POSTGRES_USER}
        - TWIHIKA_POSTGRES_PASSWORD=${TWIHIKA_POSTGRES_PASSWORD}
        - TWIHIKA_POSTGRES_DATABASE=${TWIHIKA_POSTGRES_DATABASE}
        - UPSTASH_REDIS_SSL=${UPSTASH_REDIS_SSL}
        - SERVER_NAME=${SERVER_NAME}
    container_name: debezium
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}
    depends_on:
      - redis
      - postgres
    volumes:
      - ./service_account.json:${GOOGLE_APPLICATION_CREDENTIALS}
    env_file:
      - .env
    ports:
      - "3006:8080"

  hasura:
    build:
      context: ./packages/hasura
      dockerfile: Dockerfile
    container_name: hasura
    env_file:
      - .env
    restart: always
    environment:
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_AUTH_HOOK_MODE: ${HASURA_GRAPHQL_AUTH_HOOK_MODE}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_DATABASE_URL: ${HASURA_GRAPHQL_DATABASE_URL}
      HASURA_GRAPHQL_AUTH_HOOK: ${HASURA_GRAPHQL_AUTH_HOOK}
    ports:
      - "8080:8080"
    depends_on:
      - debezium
    volumes:
      - ./packages/hasura/configuration/migration:/hasura-migrations
      - ./packages/hasura/configuration/metadata:/hasura-metadata

  # flyway:
  #   image: flyway/flyway:9.1.2
  #   # command: -configFiles=/flyway/conf/flyway.config -locations=filesystem:/flyway/sql -connectRetries=60 migrate
  #   command:  migrate
  #   environment:
  #     FLYWAY_URL: jdbc:postgresql://postgres:${TWIHIKA_POSTGRES_PORT}/${TWIHIKA_POSTGRES_DATABASE}
  #     FLYWAY_USER: ${TWIHIKA_POSTGRES_USER}
  #     FLYWAY_PASSWORD: ${TWIHIKA_POSTGRES_PASSWORD}
  #     FLYWAY_LOCATIONS: filesystem:/flyway/sql
  #     FLYWAY_CLEAN_DISABLED: "false"
  #     # FLYWAY_INIT_SQL: ${{ inputs.initSql }}
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./extra_modules/database/:/flyway/sql
  #     # - ${PWD}/database/docker-flyway.config:/flyway/conf/flyway.config
  #   depends_on:
  #     - postgres

  postgres:
    build:
      context: ./extra_modules/database
      dockerfile: Dockerfile
      args:
        - DB_LANG=ja_JP
    restart: always
    container_name: postgres
    command: -c 'config_file=/etc/postgresql/my-postgres.conf' # 追加
    env_file:
      - .env
    ports:
    - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: ${TWIHIKA_POSTGRES_DATABASE}
      POSTGRES_USER: ${TWIHIKA_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TWIHIKA_POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./extra_modules/database/my-postgres.conf:/etc/postgresql/my-postgres.conf # 追加
      - ./extra_modules/database/data:/var/lib/postgresql/data/pgdata

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.3.3
    container_name: setup
    volumes:
      - ./extra_modules/elasticsearch/certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch\n"\
          "    dns:\n"\
          "      - elasticsearch\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:password -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"password\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
      interval: 10s
      timeout: 10s
      retries: 120

  elasticsearch:
    depends_on:
      setup:
        condition: service_healthy
    container_name: elasticsearch
    build:
      context: ./extra_modules/elasticsearch
      dockerfile: Dockerfile
      args:
        - TWI_HIKA_EVENT_BUS_AWS_ACCESS_KEY=${TWI_HIKA_EVENT_BUS_AWS_ACCESS_KEY}
        - TWI_HIKA_EVENT_BUS_AWS_SECRET_KEY=${TWI_HIKA_EVENT_BUS_AWS_SECRET_KEY}
    env_file:
      - .env
    volumes:
      - ./extra_modules/elasticsearch/certs:/usr/share/elasticsearch/config/certs
      - ./extra_modules/elasticsearch/data:/usr/share/elasticsearch/data:rw
    ports:
      - 9200:9200
    environment:
      # - ES_JAVA_OPTS="-Xms1g -Xmx1g"
      - ELASTIC_PASSWORD=password
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - discovery.type=single-node
      - network.host=0.0.0.0
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  server:
    depends_on:
      - postgres
    container_name: server
    build:
      context: extra_modules/server
      dockerfile: Dockerfile.local
    ports:
      - 3001:3000
    env_file:
      - .env
    environment:
      - POSTGRESQL_URL=postgres://lcokwmsgucqdrh:password@postgres:5432/d7o47b7udoq8gp?schema=prisma
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TWI_HIKA_FIREBASE_ADMIN_JSON=${TWI_HIKA_FIREBASE_ADMIN_JSON}
      - BCRYPT_SALT=${BCRYPT_SALT}
      - COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_EXPIRATION=${JWT_EXPIRATION}


  kibana:
    depends_on:
      - elasticsearch
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.3.3
    volumes:
      - ./extra_modules/elasticsearch/certs:/usr/share/kibana/config/certs
    ports:
      - 5601:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=password
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt

volumes:
  redis_data:
